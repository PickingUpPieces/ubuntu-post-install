#!/bin/bash

# Check dpkg for package installation status
function check_package_installed {
	# query dpkg for install status and return a value
	dpkg-query -W --showformat='${Status}\n' $@ | grep "install ok installed" &> /dev/null; echo $?
}


# $1 = Package name
# returns 0 if found and 1 if not
function check_pip_package_installed {
	pip list --format=columns | grep $1 &> /dev/null; echo $?
}


# $1 = Package name
# returns 0 if found and 1 if not
function check_pip3_package_installed {
	pip3 list --format=columns | grep $1 &> /dev/null; echo $?
}


# Check for Flatpak repository
# ${1} = remote, ${2} = https://remote.example.com/, ${3} = return_function
function check_flatpak_repo {
	# echo_message header "Starting 'check_flatpak_repo' function"
	# If repo not is added
	if [ $(flatpak remotes | grep ${1} &> /dev/null; echo $?) = 1 ]; then
		# draw window
		if (whiptail \
			--title "Add ${1} Repository" \
			--yesno "This function requires '${1^}' repository but it is not present on your system. \n\nWould you like to add it to continue? " 10 64) then
			# Add repository
			echo_message info "Adding flatpak repository..."
			flatpak remote-add --if-not-exists ${1} ${2}
			echo_message success "Repository added."
			whiptail --title "Finished" --msgbox "The ${1^} repository has been added." 8 56
		else
			# Cancelled
			echo_message info "Addition of ${1^} repository cancelled."
			${3}
		fi
	else
		echo_message info "${1^} repository already added."
	fi
}


# Check if current user is in the sudo group
function check_privileges {
	echo_message header "Starting 'check_privileges' function"
	echo_message title "Checking administrative privileges of current user..."
	# Check if user is root
	if [[ $EUID != 0 ]]; then
		if [[ $(groups $USER | grep -q 'sudo'; echo $?) != 0 ]]; then
			echo_message error "This user account doesn't have admin privileges."
			echo_message info "Log in as a user with admin privileges to be able to much of these scripts.."
			echo_message info "Exiting..."
			sleep 5 && exit 99
		else
			# Current user can use 'sudo'
			echo_message success "Current user has sudo privileges. :)"
		fi
	else
		# if dependency whiptail is installed
		if command -v whiptail 2>&1 >/dev/null; then
			# draw window
			if (whiptail --title "Root User" --yesno "You are logged in as the root user. This is not recommended.\n\nAre you sure you want to proceed?" 12 56) then
				echo_message warning "You are logged in as the root user. This is not recommended. :/"
			else
				echo_message info "Exiting..."
				exit 99
			fi
		else
			# text-based warning
			echo_message warning "You are logged in as the root user. This is not recommended. :/"
			read -p "Are you sure you want to proceed? [y/N] " REPLY
			REPLY=${REPLY:-n}
			case $REPLY in
			[Yy]* )
				echo_message info "Proceeding..."
				;;
			[Nn]* )
				echo_message info "Exiting..."
				exit 99
				;;
			* )
				echo_message error 'Sorry, try again.' && check_privileges
				;;
			esac
		fi
	fi
}

# Run system checks
function system_checks {
	# Check sudo
	check_privileges
}
